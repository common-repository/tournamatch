/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************************!*\
  !*** ./src/js/admin/media-upload.js ***!
  \**************************************/
/**
 * Admin media upload input handler.
 *
 * @link       https://www.tournamatch.com
 * @since      4.3.0
 *
 * @package    Tournamatch
 *
 */
(function ($) {
  'use strict';

  window.addEventListener('load', function () {
    // Uploading files
    var file_frame;
    var wp_media_post_id = wp.media.model.settings.post.id; // Store the old id

    jQuery('.trn-media-upload-button').each(function () {
      jQuery(this).on('click', function (event) {
        event.preventDefault();
        var post_id = jQuery(this).attr('data-post-id');
        var preview_id = jQuery(this).attr('data-preview-id');
        var input_id = jQuery(this).attr('data-input-id');
        var title = jQuery(this).attr('data-title');
        var button_text = jQuery(this).attr('data-button-text');
        if (!file_frame) {
          // Set the wp.media post id so the uploader grabs the ID we want when initialised
          if (post_id) {
            wp.media.model.settings.post.id = post_id;
          }

          // Create the media frame.
          file_frame = wp.media.frames.file_frame = wp.media({
            title: title,
            button: {
              text: button_text
            },
            multiple: false // Set to true to allow multiple files to be selected
          });
        } else {
          // Set the post ID to what we want
          if (post_id) {
            file_frame.uploader.uploader.param('post_id', post_id);
          }
        }
        file_frame.off('select');

        // When an image is selected, run a callback.
        file_frame.on('select', function () {
          // We set multiple to false so only get one image from the uploader
          var attachment = file_frame.state().get('selection').first().toJSON();

          // Do something with attachment.id and/or attachment.url here
          jQuery("#".concat(preview_id)).attr('src', attachment.url).removeClass('hidden');
          jQuery("#".concat(input_id)).val(attachment.id);

          // Restore the main post ID
          wp.media.model.settings.post.id = wp_media_post_id;
        });

        // Finally, open the modal
        file_frame.open();
      });

      // Restore the main ID when the add media button is pressed
      jQuery('a.add_media').on('click', function () {
        wp.media.model.settings.post.id = wp_media_post_id;
      });
    });
  }, false);
})(jQuery);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUNtQyxJQUFJLENBQUMsQ0FBQztNQUNyQixDQUFDLENBQUM7O01BRUY7TUFDQTNCLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQ0UsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZO1FBQzFDUixFQUFFLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsRUFBRSxHQUFHTixnQkFBZ0I7TUFDdEQsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBQ04sQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUNiLENBQUMsRUFBRU8sTUFBTSxDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3VybmFtYXRjaC8uL3NyYy9qcy9hZG1pbi9tZWRpYS11cGxvYWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFkbWluIG1lZGlhIHVwbG9hZCBpbnB1dCBoYW5kbGVyLlxyXG4gKlxyXG4gKiBAbGluayAgICAgICBodHRwczovL3d3dy50b3VybmFtYXRjaC5jb21cclxuICogQHNpbmNlICAgICAgNC4zLjBcclxuICpcclxuICogQHBhY2thZ2UgICAgVG91cm5hbWF0Y2hcclxuICpcclxuICovXHJcbihmdW5jdGlvbiAoJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAvLyBVcGxvYWRpbmcgZmlsZXNcclxuICAgICAgICBsZXQgZmlsZV9mcmFtZTtcclxuICAgICAgICBsZXQgd3BfbWVkaWFfcG9zdF9pZCA9IHdwLm1lZGlhLm1vZGVsLnNldHRpbmdzLnBvc3QuaWQ7IC8vIFN0b3JlIHRoZSBvbGQgaWRcclxuXHJcbiAgICAgICAgalF1ZXJ5KCcudHJuLW1lZGlhLXVwbG9hZC1idXR0b24nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBqUXVlcnkodGhpcykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwb3N0X2lkID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2RhdGEtcG9zdC1pZCcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByZXZpZXdfaWQgPSBqUXVlcnkodGhpcykuYXR0cignZGF0YS1wcmV2aWV3LWlkJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRfaWQgPSBqUXVlcnkodGhpcykuYXR0cignZGF0YS1pbnB1dC1pZCcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2RhdGEtdGl0bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBidXR0b25fdGV4dCA9IGpRdWVyeSh0aGlzKS5hdHRyKCdkYXRhLWJ1dHRvbi10ZXh0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlX2ZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB3cC5tZWRpYSBwb3N0IGlkIHNvIHRoZSB1cGxvYWRlciBncmFicyB0aGUgSUQgd2Ugd2FudCB3aGVuIGluaXRpYWxpc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3AubWVkaWEubW9kZWwuc2V0dGluZ3MucG9zdC5pZCA9IHBvc3RfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIG1lZGlhIGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfZnJhbWUgPSB3cC5tZWRpYS5mcmFtZXMuZmlsZV9mcmFtZSA9IHdwLm1lZGlhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGJ1dHRvbl90ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZTogZmFsc2VcdC8vIFNldCB0byB0cnVlIHRvIGFsbG93IG11bHRpcGxlIGZpbGVzIHRvIGJlIHNlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgcG9zdCBJRCB0byB3aGF0IHdlIHdhbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zdF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2ZyYW1lLnVwbG9hZGVyLnVwbG9hZGVyLnBhcmFtKCdwb3N0X2lkJywgcG9zdF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZpbGVfZnJhbWUub2ZmKCdzZWxlY3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBXaGVuIGFuIGltYWdlIGlzIHNlbGVjdGVkLCBydW4gYSBjYWxsYmFjay5cclxuICAgICAgICAgICAgICAgIGZpbGVfZnJhbWUub24oJ3NlbGVjdCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBzZXQgbXVsdGlwbGUgdG8gZmFsc2Ugc28gb25seSBnZXQgb25lIGltYWdlIGZyb20gdGhlIHVwbG9hZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dGFjaG1lbnQgPSBmaWxlX2ZyYW1lLnN0YXRlKCkuZ2V0KCdzZWxlY3Rpb24nKS5maXJzdCgpLnRvSlNPTigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBzb21ldGhpbmcgd2l0aCBhdHRhY2htZW50LmlkIGFuZC9vciBhdHRhY2htZW50LnVybCBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGAjJHtwcmV2aWV3X2lkfWApLmF0dHIoJ3NyYycsIGF0dGFjaG1lbnQudXJsKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGAjJHtpbnB1dF9pZH1gKS52YWwoYXR0YWNobWVudC5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIG1haW4gcG9zdCBJRFxyXG4gICAgICAgICAgICAgICAgICAgIHdwLm1lZGlhLm1vZGVsLnNldHRpbmdzLnBvc3QuaWQgPSB3cF9tZWRpYV9wb3N0X2lkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgb3BlbiB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgIGZpbGVfZnJhbWUub3BlbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIG1haW4gSUQgd2hlbiB0aGUgYWRkIG1lZGlhIGJ1dHRvbiBpcyBwcmVzc2VkXHJcbiAgICAgICAgICAgIGpRdWVyeSgnYS5hZGRfbWVkaWEnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB3cC5tZWRpYS5tb2RlbC5zZXR0aW5ncy5wb3N0LmlkID0gd3BfbWVkaWFfcG9zdF9pZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBmYWxzZSk7XHJcbn0pKGpRdWVyeSk7Il0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZmlsZV9mcmFtZSIsIndwX21lZGlhX3Bvc3RfaWQiLCJ3cCIsIm1lZGlhIiwibW9kZWwiLCJzZXR0aW5ncyIsInBvc3QiLCJpZCIsImpRdWVyeSIsImVhY2giLCJvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJwb3N0X2lkIiwiYXR0ciIsInByZXZpZXdfaWQiLCJpbnB1dF9pZCIsInRpdGxlIiwiYnV0dG9uX3RleHQiLCJmcmFtZXMiLCJidXR0b24iLCJ0ZXh0IiwibXVsdGlwbGUiLCJ1cGxvYWRlciIsInBhcmFtIiwib2ZmIiwiYXR0YWNobWVudCIsInN0YXRlIiwiZ2V0IiwiZmlyc3QiLCJ0b0pTT04iLCJjb25jYXQiLCJ1cmwiLCJyZW1vdmVDbGFzcyIsInZhbCIsIm9wZW4iXSwic291cmNlUm9vdCI6IiJ9